// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type Client,
  type TDataShape,
  formDataBodySerializer,
} from "./client";
import type {
  UploadImagesData,
  UploadImagesResponses,
  UploadImagesErrors,
  GetAllImagesData,
  GetAllImagesResponses,
  DeleteImageData,
  DeleteImageResponses,
  DeleteImageErrors,
  GetImageFileData,
  GetImageFileResponses,
  GetImageFileErrors,
  GetImageThumbnailData,
  GetImageThumbnailResponses,
  GetImageThumbnailErrors,
  GetImageMetadataData,
  GetImageMetadataResponses,
  GetImageMetadataErrors,
  GetAllBatchesData,
  GetAllBatchesResponses,
  CreateBatchData,
  CreateBatchResponses,
  CreateBatchErrors,
  DeleteBatchData,
  DeleteBatchResponses,
  DeleteBatchErrors,
  GetBatchData,
  GetBatchResponses,
  GetBatchErrors,
  RenameBatchData,
  RenameBatchResponses,
  RenameBatchErrors,
  RemoveImagesFromBatchData,
  RemoveImagesFromBatchResponses,
  RemoveImagesFromBatchErrors,
  AddImagesToBatchData,
  AddImagesToBatchResponses,
  AddImagesToBatchErrors,
  UploadAndAddImagesToBatchData,
  UploadAndAddImagesToBatchResponses,
  UploadAndAddImagesToBatchErrors,
  AnalyzeBatchData,
  AnalyzeBatchResponses,
  AnalyzeBatchErrors,
  UpdateGroupsInBatchData,
  UpdateGroupsInBatchResponses,
  UpdateGroupsInBatchErrors,
  ReadRootGetData,
  ReadRootGetResponses,
} from "./types.gen";
import { client } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Upload Images
 * Uploads one or more image files. For each new image, it queues background
 * tasks for metadata extraction, thumbnail generation, and feature embedding.
 */
export const uploadImages = <ThrowOnError extends boolean = false>(
  options: Options<UploadImagesData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    UploadImagesResponses,
    UploadImagesErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    url: "/images/upload",
    ...options,
    headers: {
      "Content-Type": null,
      ...options.headers,
    },
  });
};

/**
 * Get All Images
 */
export const getAllImages = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllImagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllImagesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/images/",
    ...options,
  });
};

/**
 * Delete Image
 */
export const deleteImage = <ThrowOnError extends boolean = false>(
  options: Options<DeleteImageData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteImageResponses,
    DeleteImageErrors,
    ThrowOnError
  >({
    url: "/images/{image_id}",
    ...options,
  });
};

/**
 * Get Image File
 */
export const getImageFile = <ThrowOnError extends boolean = false>(
  options: Options<GetImageFileData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetImageFileResponses,
    GetImageFileErrors,
    ThrowOnError
  >({
    url: "/images/{image_id}",
    ...options,
  });
};

/**
 * Get Thumbnail File
 */
export const getImageThumbnail = <ThrowOnError extends boolean = false>(
  options: Options<GetImageThumbnailData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetImageThumbnailResponses,
    GetImageThumbnailErrors,
    ThrowOnError
  >({
    url: "/images/thumbnail/{image_id}",
    ...options,
  });
};

/**
 * Get Image Metadata
 */
export const getImageMetadata = <ThrowOnError extends boolean = false>(
  options: Options<GetImageMetadataData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetImageMetadataResponses,
    GetImageMetadataErrors,
    ThrowOnError
  >({
    url: "/images/metadata/{image_id}",
    ...options,
  });
};

/**
 * Get All Batches
 */
export const getAllBatches = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllBatchesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllBatchesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/batches/",
    ...options,
  });
};

/**
 * Create Batch
 */
export const createBatch = <ThrowOnError extends boolean = false>(
  options: Options<CreateBatchData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateBatchResponses,
    CreateBatchErrors,
    ThrowOnError
  >({
    url: "/batches/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Batch
 */
export const deleteBatch = <ThrowOnError extends boolean = false>(
  options: Options<DeleteBatchData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteBatchResponses,
    DeleteBatchErrors,
    ThrowOnError
  >({
    url: "/batches/{batch_id}",
    ...options,
  });
};

/**
 * Get Batch Details
 */
export const getBatch = <ThrowOnError extends boolean = false>(
  options: Options<GetBatchData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetBatchResponses,
    GetBatchErrors,
    ThrowOnError
  >({
    url: "/batches/{batch_id}",
    ...options,
  });
};

/**
 * Rename Batch
 */
export const renameBatch = <ThrowOnError extends boolean = false>(
  options: Options<RenameBatchData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    RenameBatchResponses,
    RenameBatchErrors,
    ThrowOnError
  >({
    url: "/batches/{batch_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Remove Images From Batch
 */
export const removeImagesFromBatch = <ThrowOnError extends boolean = false>(
  options: Options<RemoveImagesFromBatchData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    RemoveImagesFromBatchResponses,
    RemoveImagesFromBatchErrors,
    ThrowOnError
  >({
    url: "/batches/{batch_id}/images",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Add Images To Batch
 */
export const addImagesToBatch = <ThrowOnError extends boolean = false>(
  options: Options<AddImagesToBatchData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    AddImagesToBatchResponses,
    AddImagesToBatchErrors,
    ThrowOnError
  >({
    url: "/batches/{batch_id}/images",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Upload And Add To Batch
 * Uploads new images, adds them to the batch, and queues background tasks for processing.
 */
export const uploadAndAddImagesToBatch = <ThrowOnError extends boolean = false>(
  options: Options<UploadAndAddImagesToBatchData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    UploadAndAddImagesToBatchResponses,
    UploadAndAddImagesToBatchErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    url: "/batches/{batch_id}/upload-and-add",
    ...options,
    headers: {
      "Content-Type": null,
      ...options.headers,
    },
  });
};

/**
 * Analyze Batch
 */
export const analyzeBatch = <ThrowOnError extends boolean = false>(
  options: Options<AnalyzeBatchData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    AnalyzeBatchResponses,
    AnalyzeBatchErrors,
    ThrowOnError
  >({
    url: "/batches/{batch_id}/analyze",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Update Groups
 */
export const updateGroupsInBatch = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGroupsInBatchData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateGroupsInBatchResponses,
    UpdateGroupsInBatchErrors,
    ThrowOnError
  >({
    url: "/batches/{batch_id}/groups",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Read Root
 * A simple health check endpoint.
 */
export const readRootGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadRootGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadRootGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/",
    ...options,
  });
};
