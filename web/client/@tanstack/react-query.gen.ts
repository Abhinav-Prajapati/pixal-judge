// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  uploadImages,
  getAllImages,
  deleteImage,
  getImageFile,
  getImageThumbnail,
  getImageMetadata,
  getAllBatches,
  createBatch,
  deleteBatch,
  getBatch,
  renameBatch,
  removeImagesFromBatch,
  addImagesToBatch,
  uploadAndAddImagesToBatch,
  analyzeBatch,
  updateGroupsInBatch,
  readRootGet,
} from "../sdk.gen";
import { type UseMutationOptions, queryOptions } from "@tanstack/react-query";
import type {
  UploadImagesData,
  UploadImagesError,
  UploadImagesResponse,
  GetAllImagesData,
  DeleteImageData,
  DeleteImageError,
  GetImageFileData,
  GetImageThumbnailData,
  GetImageMetadataData,
  GetAllBatchesData,
  CreateBatchData,
  CreateBatchError,
  CreateBatchResponse,
  DeleteBatchData,
  DeleteBatchError,
  GetBatchData,
  RenameBatchData,
  RenameBatchError,
  RenameBatchResponse,
  RemoveImagesFromBatchData,
  RemoveImagesFromBatchError,
  RemoveImagesFromBatchResponse,
  AddImagesToBatchData,
  AddImagesToBatchError,
  AddImagesToBatchResponse,
  UploadAndAddImagesToBatchData,
  UploadAndAddImagesToBatchError,
  UploadAndAddImagesToBatchResponse,
  AnalyzeBatchData,
  AnalyzeBatchError,
  AnalyzeBatchResponse,
  UpdateGroupsInBatchData,
  UpdateGroupsInBatchError,
  UpdateGroupsInBatchResponse,
  ReadRootGetData,
} from "../types.gen";
import { client } from "../client.gen";

/**
 * Upload Images
 * Uploads one or more image files. For each new image, it queues background
 * tasks for metadata extraction, thumbnail generation, and feature embedding.
 */
export const uploadImagesMutation = (
  options?: Partial<Options<UploadImagesData>>,
): UseMutationOptions<
  UploadImagesResponse,
  UploadImagesError,
  Options<UploadImagesData>
> => {
  const mutationOptions: UseMutationOptions<
    UploadImagesResponse,
    UploadImagesError,
    Options<UploadImagesData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await uploadImages({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getAllImagesQueryKey = (options?: Options<GetAllImagesData>) =>
  createQueryKey("getAllImages", options);

/**
 * Get All Images
 */
export const getAllImagesOptions = (options?: Options<GetAllImagesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAllImages({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAllImagesQueryKey(options),
  });
};

/**
 * Delete Image
 */
export const deleteImageMutation = (
  options?: Partial<Options<DeleteImageData>>,
): UseMutationOptions<unknown, DeleteImageError, Options<DeleteImageData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteImageError,
    Options<DeleteImageData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteImage({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getImageFileQueryKey = (options: Options<GetImageFileData>) =>
  createQueryKey("getImageFile", options);

/**
 * Get Image File
 */
export const getImageFileOptions = (options: Options<GetImageFileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getImageFile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getImageFileQueryKey(options),
  });
};

export const getImageThumbnailQueryKey = (
  options: Options<GetImageThumbnailData>,
) => createQueryKey("getImageThumbnail", options);

/**
 * Get Thumbnail File
 */
export const getImageThumbnailOptions = (
  options: Options<GetImageThumbnailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getImageThumbnail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getImageThumbnailQueryKey(options),
  });
};

export const getImageMetadataQueryKey = (
  options: Options<GetImageMetadataData>,
) => createQueryKey("getImageMetadata", options);

/**
 * Get Image Metadata
 */
export const getImageMetadataOptions = (
  options: Options<GetImageMetadataData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getImageMetadata({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getImageMetadataQueryKey(options),
  });
};

export const getAllBatchesQueryKey = (options?: Options<GetAllBatchesData>) =>
  createQueryKey("getAllBatches", options);

/**
 * Get All Batches
 */
export const getAllBatchesOptions = (options?: Options<GetAllBatchesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAllBatches({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAllBatchesQueryKey(options),
  });
};

/**
 * Create Batch
 */
export const createBatchMutation = (
  options?: Partial<Options<CreateBatchData>>,
): UseMutationOptions<
  CreateBatchResponse,
  CreateBatchError,
  Options<CreateBatchData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateBatchResponse,
    CreateBatchError,
    Options<CreateBatchData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await createBatch({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Batch
 */
export const deleteBatchMutation = (
  options?: Partial<Options<DeleteBatchData>>,
): UseMutationOptions<unknown, DeleteBatchError, Options<DeleteBatchData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteBatchError,
    Options<DeleteBatchData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteBatch({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getBatchQueryKey = (options: Options<GetBatchData>) =>
  createQueryKey("getBatch", options);

/**
 * Get Batch Details
 */
export const getBatchOptions = (options: Options<GetBatchData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getBatch({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getBatchQueryKey(options),
  });
};

/**
 * Rename Batch
 */
export const renameBatchMutation = (
  options?: Partial<Options<RenameBatchData>>,
): UseMutationOptions<
  RenameBatchResponse,
  RenameBatchError,
  Options<RenameBatchData>
> => {
  const mutationOptions: UseMutationOptions<
    RenameBatchResponse,
    RenameBatchError,
    Options<RenameBatchData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await renameBatch({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Remove Images From Batch
 */
export const removeImagesFromBatchMutation = (
  options?: Partial<Options<RemoveImagesFromBatchData>>,
): UseMutationOptions<
  RemoveImagesFromBatchResponse,
  RemoveImagesFromBatchError,
  Options<RemoveImagesFromBatchData>
> => {
  const mutationOptions: UseMutationOptions<
    RemoveImagesFromBatchResponse,
    RemoveImagesFromBatchError,
    Options<RemoveImagesFromBatchData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await removeImagesFromBatch({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Add Images To Batch
 */
export const addImagesToBatchMutation = (
  options?: Partial<Options<AddImagesToBatchData>>,
): UseMutationOptions<
  AddImagesToBatchResponse,
  AddImagesToBatchError,
  Options<AddImagesToBatchData>
> => {
  const mutationOptions: UseMutationOptions<
    AddImagesToBatchResponse,
    AddImagesToBatchError,
    Options<AddImagesToBatchData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await addImagesToBatch({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Upload And Add To Batch
 * Uploads new images, adds them to the batch, and queues background tasks for processing.
 */
export const uploadAndAddImagesToBatchMutation = (
  options?: Partial<Options<UploadAndAddImagesToBatchData>>,
): UseMutationOptions<
  UploadAndAddImagesToBatchResponse,
  UploadAndAddImagesToBatchError,
  Options<UploadAndAddImagesToBatchData>
> => {
  const mutationOptions: UseMutationOptions<
    UploadAndAddImagesToBatchResponse,
    UploadAndAddImagesToBatchError,
    Options<UploadAndAddImagesToBatchData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await uploadAndAddImagesToBatch({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Analyze Batch
 */
export const analyzeBatchMutation = (
  options?: Partial<Options<AnalyzeBatchData>>,
): UseMutationOptions<
  AnalyzeBatchResponse,
  AnalyzeBatchError,
  Options<AnalyzeBatchData>
> => {
  const mutationOptions: UseMutationOptions<
    AnalyzeBatchResponse,
    AnalyzeBatchError,
    Options<AnalyzeBatchData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await analyzeBatch({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Update Groups
 */
export const updateGroupsInBatchMutation = (
  options?: Partial<Options<UpdateGroupsInBatchData>>,
): UseMutationOptions<
  UpdateGroupsInBatchResponse,
  UpdateGroupsInBatchError,
  Options<UpdateGroupsInBatchData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateGroupsInBatchResponse,
    UpdateGroupsInBatchError,
    Options<UpdateGroupsInBatchData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await updateGroupsInBatch({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readRootGetQueryKey = (options?: Options<ReadRootGetData>) =>
  createQueryKey("readRootGet", options);

/**
 * Read Root
 * A simple health check endpoint.
 */
export const readRootGetOptions = (options?: Options<ReadRootGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readRootGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readRootGetQueryKey(options),
  });
};
