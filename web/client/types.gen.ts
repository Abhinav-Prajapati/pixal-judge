// This file is auto-generated by @hey-api/openapi-ts

/**
 * BatchAnalyze
 * Schema for the analysis request using HDBSCAN parameters.
 */
export type BatchAnalyze = {
  /**
   * Min Cluster Size
   */
  min_cluster_size?: number;
  /**
   * Min Samples
   */
  min_samples?: number;
  /**
   * Metric
   */
  metric?: string;
};

/**
 * BatchCreate
 * Schema for the initial creation of a batch.
 */
export type BatchCreate = {
  /**
   * Name
   */
  name: string;
  /**
   * Image Ids
   */
  image_ids: Array<number>;
};

/**
 * BatchGroupUpdate
 * Schema for manually updating a batch's group map.
 */
export type BatchGroupUpdate = {
  /**
   * Group Map
   */
  group_map: {
    [key: string]: Array<number>;
  };
};

/**
 * BatchRename
 * Schema for renaming a batch.
 */
export type BatchRename = {
  /**
   * Name
   */
  name: string;
};

/**
 * BatchResponse
 * Schema for returning full batch details.
 */
export type BatchResponse = {
  /**
   * Id
   */
  id: number;
  /**
   * Batch Name
   */
  batch_name: string;
  /**
   * Status
   */
  status: string;
  /**
   * Parameters
   */
  parameters: {
    [key: string]: unknown;
  } | null;
  /**
   * Image Associations
   */
  image_associations: Array<GroupAssociationResponse>;
};

/**
 * BatchUpdateImages
 * Schema for adding/removing images from a batch.
 */
export type BatchUpdateImages = {
  /**
   * Image Ids
   */
  image_ids: Array<number>;
};

/**
 * Body_uploadAndAddImagesToBatch
 */
export type BodyUploadAndAddImagesToBatch = {
  /**
   * Files
   */
  files: Array<Blob | File>;
};

/**
 * Body_uploadImages
 */
export type BodyUploadImages = {
  /**
   * Files
   */
  files: Array<Blob | File>;
};

/**
 * GroupAssociationResponse
 * Schema for an image's association within a batch, including its group.
 */
export type GroupAssociationResponse = {
  image: ImageResponse;
  /**
   * Group Label
   */
  group_label: string | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: Array<ValidationError>;
};

/**
 * ImageResponse
 * Schema for returning image details. This model is unchanged.
 */
export type ImageResponse = {
  /**
   * Id
   */
  id: number;
  /**
   * Filename
   */
  filename: string;
  /**
   * Original Filename
   */
  original_filename: string;
  /**
   * File Path
   */
  file_path: string;
  /**
   * Has Thumbnail
   */
  has_thumbnail: boolean;
  /**
   * Is Duplicate
   */
  is_duplicate?: boolean;
  /**
   * Message
   */
  message?: string | null;
};

/**
 * Metadata
 * Schema for detailed image metadata.
 */
export type Metadata = {
  /**
   * Width
   */
  width: number | null;
  /**
   * Height
   */
  height: number | null;
  /**
   * Orientation
   */
  orientation: number | null;
  /**
   * Shot At
   */
  shot_at: string | null;
  /**
   * Latitude
   */
  latitude: number | null;
  /**
   * Longitude
   */
  longitude: number | null;
  /**
   * Camera Make
   */
  camera_make: string | null;
  /**
   * Camera Model
   */
  camera_model: string | null;
  /**
   * Focal Length
   */
  focal_length: string | null;
  /**
   * F Number
   */
  f_number: number | null;
  /**
   * Exposure Time
   */
  exposure_time: string | null;
  /**
   * Iso
   */
  iso: number | null;
  /**
   * Caption
   */
  caption: string | null;
  /**
   * Tags
   */
  tags: unknown | null;
  /**
   * Rating
   */
  rating: number | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: Array<string | number>;
  /**
   * Message
   */
  msg: string;
  /**
   * Error Type
   */
  type: string;
};

export type UploadImagesData = {
  body: BodyUploadImages;
  path?: never;
  query?: never;
  url: "/images/upload";
};

export type UploadImagesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UploadImagesError = UploadImagesErrors[keyof UploadImagesErrors];

export type UploadImagesResponses = {
  /**
   * Response Uploadimages
   * Successful Response
   */
  200: Array<ImageResponse>;
};

export type UploadImagesResponse =
  UploadImagesResponses[keyof UploadImagesResponses];

export type GetAllImagesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/images/";
};

export type GetAllImagesResponses = {
  /**
   * Response Getallimages
   * Successful Response
   */
  200: Array<ImageResponse>;
};

export type GetAllImagesResponse =
  GetAllImagesResponses[keyof GetAllImagesResponses];

export type DeleteImageData = {
  body?: never;
  path: {
    /**
     * Image Id
     */
    image_id: number;
  };
  query?: never;
  url: "/images/{image_id}";
};

export type DeleteImageErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteImageError = DeleteImageErrors[keyof DeleteImageErrors];

export type DeleteImageResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetImageFileData = {
  body?: never;
  path: {
    /**
     * Image Id
     */
    image_id: number;
  };
  query?: never;
  url: "/images/{image_id}";
};

export type GetImageFileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetImageFileError = GetImageFileErrors[keyof GetImageFileErrors];

export type GetImageFileResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetImageThumbnailData = {
  body?: never;
  path: {
    /**
     * Image Id
     */
    image_id: number;
  };
  query?: never;
  url: "/images/thumbnail/{image_id}";
};

export type GetImageThumbnailErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetImageThumbnailError =
  GetImageThumbnailErrors[keyof GetImageThumbnailErrors];

export type GetImageThumbnailResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetImageMetadataData = {
  body?: never;
  path: {
    /**
     * Image Id
     */
    image_id: number;
  };
  query?: never;
  url: "/images/metadata/{image_id}";
};

export type GetImageMetadataErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetImageMetadataError =
  GetImageMetadataErrors[keyof GetImageMetadataErrors];

export type GetImageMetadataResponses = {
  /**
   * Successful Response
   */
  200: Metadata;
};

export type GetImageMetadataResponse =
  GetImageMetadataResponses[keyof GetImageMetadataResponses];

export type GetAllBatchesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/batches/";
};

export type GetAllBatchesResponses = {
  /**
   * Response Getallbatches
   * Successful Response
   */
  200: Array<BatchResponse>;
};

export type GetAllBatchesResponse =
  GetAllBatchesResponses[keyof GetAllBatchesResponses];

export type CreateBatchData = {
  body: BatchCreate;
  path?: never;
  query?: never;
  url: "/batches/";
};

export type CreateBatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateBatchError = CreateBatchErrors[keyof CreateBatchErrors];

export type CreateBatchResponses = {
  /**
   * Successful Response
   */
  200: BatchResponse;
};

export type CreateBatchResponse =
  CreateBatchResponses[keyof CreateBatchResponses];

export type DeleteBatchData = {
  body?: never;
  path: {
    /**
     * Batch Id
     */
    batch_id: number;
  };
  query?: never;
  url: "/batches/{batch_id}";
};

export type DeleteBatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteBatchError = DeleteBatchErrors[keyof DeleteBatchErrors];

export type DeleteBatchResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetBatchData = {
  body?: never;
  path: {
    /**
     * Batch Id
     */
    batch_id: number;
  };
  query?: never;
  url: "/batches/{batch_id}";
};

export type GetBatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetBatchError = GetBatchErrors[keyof GetBatchErrors];

export type GetBatchResponses = {
  /**
   * Successful Response
   */
  200: BatchResponse;
};

export type GetBatchResponse = GetBatchResponses[keyof GetBatchResponses];

export type RenameBatchData = {
  body: BatchRename;
  path: {
    /**
     * Batch Id
     */
    batch_id: number;
  };
  query?: never;
  url: "/batches/{batch_id}";
};

export type RenameBatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type RenameBatchError = RenameBatchErrors[keyof RenameBatchErrors];

export type RenameBatchResponses = {
  /**
   * Successful Response
   */
  200: BatchResponse;
};

export type RenameBatchResponse =
  RenameBatchResponses[keyof RenameBatchResponses];

export type RemoveImagesFromBatchData = {
  body: BatchUpdateImages;
  path: {
    /**
     * Batch Id
     */
    batch_id: number;
  };
  query?: never;
  url: "/batches/{batch_id}/images";
};

export type RemoveImagesFromBatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type RemoveImagesFromBatchError =
  RemoveImagesFromBatchErrors[keyof RemoveImagesFromBatchErrors];

export type RemoveImagesFromBatchResponses = {
  /**
   * Successful Response
   */
  200: BatchResponse;
};

export type RemoveImagesFromBatchResponse =
  RemoveImagesFromBatchResponses[keyof RemoveImagesFromBatchResponses];

export type AddImagesToBatchData = {
  body: BatchUpdateImages;
  path: {
    /**
     * Batch Id
     */
    batch_id: number;
  };
  query?: never;
  url: "/batches/{batch_id}/images";
};

export type AddImagesToBatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AddImagesToBatchError =
  AddImagesToBatchErrors[keyof AddImagesToBatchErrors];

export type AddImagesToBatchResponses = {
  /**
   * Successful Response
   */
  200: BatchResponse;
};

export type AddImagesToBatchResponse =
  AddImagesToBatchResponses[keyof AddImagesToBatchResponses];

export type UploadAndAddImagesToBatchData = {
  body: BodyUploadAndAddImagesToBatch;
  path: {
    /**
     * Batch Id
     */
    batch_id: number;
  };
  query?: never;
  url: "/batches/{batch_id}/upload-and-add";
};

export type UploadAndAddImagesToBatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UploadAndAddImagesToBatchError =
  UploadAndAddImagesToBatchErrors[keyof UploadAndAddImagesToBatchErrors];

export type UploadAndAddImagesToBatchResponses = {
  /**
   * Successful Response
   */
  200: BatchResponse;
};

export type UploadAndAddImagesToBatchResponse =
  UploadAndAddImagesToBatchResponses[keyof UploadAndAddImagesToBatchResponses];

export type AnalyzeBatchData = {
  body: BatchAnalyze;
  path: {
    /**
     * Batch Id
     */
    batch_id: number;
  };
  query?: never;
  url: "/batches/{batch_id}/analyze";
};

export type AnalyzeBatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AnalyzeBatchError = AnalyzeBatchErrors[keyof AnalyzeBatchErrors];

export type AnalyzeBatchResponses = {
  /**
   * Successful Response
   */
  200: BatchResponse;
};

export type AnalyzeBatchResponse =
  AnalyzeBatchResponses[keyof AnalyzeBatchResponses];

export type UpdateGroupsInBatchData = {
  body: BatchGroupUpdate;
  path: {
    /**
     * Batch Id
     */
    batch_id: number;
  };
  query?: never;
  url: "/batches/{batch_id}/groups";
};

export type UpdateGroupsInBatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateGroupsInBatchError =
  UpdateGroupsInBatchErrors[keyof UpdateGroupsInBatchErrors];

export type UpdateGroupsInBatchResponses = {
  /**
   * Successful Response
   */
  200: BatchResponse;
};

export type UpdateGroupsInBatchResponse =
  UpdateGroupsInBatchResponses[keyof UpdateGroupsInBatchResponses];

export type ReadRootGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/";
};

export type ReadRootGetResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};
